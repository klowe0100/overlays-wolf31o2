diff -urN cacti-spine-0.8.7a.orig/php.c cacti-spine-0.8.7a/php.c
--- cacti-spine-0.8.7a.orig/php.c	2007-11-25 19:40:21.000000000 -0800
+++ cacti-spine-0.8.7a/php.c	2008-09-20 09:28:14.000000000 -0700
@@ -49,13 +49,13 @@
  */
 char *php_cmd(const char *php_command, int php_process) {
 	char *result_string;
-	char command[BUFSIZE];
+	char command[BIG_BUFSIZE];
 	int write_status;
 
 	assert(php_command != 0);
 
 	/* pad command with CR-LF */
-	snprintf(command, BUFSIZE, "%s\r\n", php_command);
+	snprintf(command, BIG_BUFSIZE, "%s\r\n", php_command);
 
 	/* place lock around mutex */
 	switch (php_process) {
@@ -146,7 +146,7 @@
 	char *cp;
 	char *bptr;
 
-	if (!(result_string = (char *)malloc(BUFSIZE))) {
+	if (!(result_string = (char *)malloc(BIG_BUFSIZE))) {
 		die("ERROR: Fatal malloc error: php.c php_readpipe!");
 	}
 	result_string[0] = '\0';
@@ -220,7 +220,7 @@
 		bptr = result_string;
 
 		while (1) {
-			i = read(php_processes[php_process].php_read_fd,bptr,BUFSIZE-(bptr-result_string));
+			i = read(php_processes[php_process].php_read_fd,bptr,BIG_BUFSIZE-(bptr-result_string));
 
 			if (i <= 0) {
 				SET_UNDEFINED(result_string);
@@ -240,7 +240,7 @@
 				break;
 			}
 
-			if (bptr >= result_string+BUFSIZE) {
+			if (bptr >= result_string+BIG_BUFSIZE) {
 				SPINE_LOG(("ERROR: SS[%i] The Script Server result was longer than the acceptable range\n", php_process));
 				SET_UNDEFINED(result_string);
 			}
diff -urN cacti-spine-0.8.7a.orig/poller.c cacti-spine-0.8.7a/poller.c
--- cacti-spine-0.8.7a.orig/poller.c	2007-11-25 19:40:21.000000000 -0800
+++ cacti-spine-0.8.7a/poller.c	2008-09-20 09:32:28.000000000 -0700
@@ -94,12 +94,12 @@
 	char query5[BUFSIZE];
 	char query6[BUFSIZE];
 	char query7[BUFSIZE];
-	char query8[BUFSIZE];
+	char query8[BIG_BUFSIZE];
 	char query9[BUFSIZE];
 	char query10[BUFSIZE];
 	char errstr[BUFSIZE];
 	char sysUptime[40];
-	char result_string[BUFSIZE];
+	char result_string[BIG_BUFSIZE];
 	int  result_length;
 
 	int num_rows;
@@ -115,8 +115,8 @@
 
 	char *poll_result = NULL;
 	char *host_time   = NULL;
-	char update_sql[BUFSIZE];
-	char temp_result[BUFSIZE];
+	char update_sql[BIG_BUFSIZE];
+	char temp_result[BIG_BUFSIZE];
 
 	int  num_snmp_agents   = 0;
 	int  last_snmp_version = 0;
@@ -217,7 +217,7 @@
 			set.poller_interval, host_id);
 
 	/* query to add output records to the poller output table */
-	snprintf(query8, BUFSIZE,
+	snprintf(query8, BIG_BUFSIZE,
 		"INSERT INTO poller_output"
 		" (local_data_id, rrd_name, time, output) VALUES");
 
@@ -396,7 +396,7 @@
 				}
 
 				/* update host table */
-				snprintf(update_sql, BUFSIZE, "UPDATE host "
+				snprintf(update_sql, BIG_BUFSIZE, "UPDATE host "
 					"SET status='%i', status_event_count='%i', status_fail_date='%s',"
 						" status_rec_date='%s', status_last_error='%s', min_time='%f',"
 						" max_time='%f', cur_time='%f', avg_time='%f', total_polls='%i',"
@@ -498,7 +498,7 @@
 							poll_result = strdup("U");
 						}
 
-						if (!(query3 = (char *)malloc(BUFSIZE))) {
+						if (!(query3 = (char *)malloc(BIG_BUFSIZE))) {
 							die("ERROR: Fatal malloc error: poller.c reindex insert!");
 						}
 						query3[0] = '\0';
@@ -509,21 +509,21 @@
 						}else if ((!strcmp(reindex->op, "=")) && (strcmp(reindex->assert_value,poll_result))) {
 							SPINE_LOG_HIGH(("Host[%i] ASSERT: '%s' .eq. '%s' failed. Recaching host '%s', data query #%i\n", host->id, reindex->assert_value, poll_result, host->hostname, reindex->data_query_id));
 
-							snprintf(query3, BUFSIZE, "REPLACE INTO poller_command (poller_id, time, action,command) values (0, NOW(), %i, '%i:%i')", POLLER_COMMAND_REINDEX, host->id, reindex->data_query_id);
+							snprintf(query3, BIG_BUFSIZE, "REPLACE INTO poller_command (poller_id, time, action,command) values (0, NOW(), %i, '%i:%i')", POLLER_COMMAND_REINDEX, host->id, reindex->data_query_id);
 							db_insert(&mysql, query3);
 							assert_fail = TRUE;
 							previous_assert_failure = TRUE;
 						}else if ((!strcmp(reindex->op, ">")) && (strtoll(reindex->assert_value, (char **)NULL, 10) < strtoll(poll_result, (char **)NULL, 10))) {
 							SPINE_LOG_HIGH(("Host[%i] ASSERT: '%s' .gt. '%s' failed. Recaching host '%s', data query #%i\n", host->id, reindex->assert_value, poll_result, host->hostname, reindex->data_query_id));
 
-							snprintf(query3, BUFSIZE, "REPLACE INTO poller_command (poller_id, time, action, command) values (0, NOW(), %i, '%i:%i')", POLLER_COMMAND_REINDEX, host->id, reindex->data_query_id);
+							snprintf(query3, BIG_BUFSIZE, "REPLACE INTO poller_command (poller_id, time, action, command) values (0, NOW(), %i, '%i:%i')", POLLER_COMMAND_REINDEX, host->id, reindex->data_query_id);
 							db_insert(&mysql, query3);
 							assert_fail = TRUE;
 							previous_assert_failure = TRUE;
 						}else if ((!strcmp(reindex->op, "<")) && (strtoll(reindex->assert_value, (char **)NULL, 10) > strtoll(poll_result, (char **)NULL, 10))) {
 							SPINE_LOG_HIGH(("Host[%i] ASSERT: '%s' .lt. '%s' failed. Recaching host '%s', data query #%i\n", host->id, reindex->assert_value, poll_result, host->hostname, reindex->data_query_id));
 
-							snprintf(query3, BUFSIZE, "REPLACE INTO poller_command (poller_id, time, action, command) values (0, NOW(), %i, '%i:%i')", POLLER_COMMAND_REINDEX, host->id, reindex->data_query_id);
+							snprintf(query3, BIG_BUFSIZE, "REPLACE INTO poller_command (poller_id, time, action, command) values (0, NOW(), %i, '%i:%i')", POLLER_COMMAND_REINDEX, host->id, reindex->data_query_id);
 							db_insert(&mysql, query3);
 							assert_fail = TRUE;
 							previous_assert_failure = TRUE;
@@ -534,7 +534,7 @@
 						 * 2) the OP code is > or < meaning the current value could have changed without causing
 						 *     the assert to fail */
 						if ((assert_fail) || (!strcmp(reindex->op, ">")) || (!strcmp(reindex->op, "<"))) {
-							snprintf(query3, BUFSIZE, "UPDATE poller_reindex SET assert_value='%s' WHERE host_id='%i' AND data_query_id='%i' and arg1='%s'", poll_result, host_id, reindex->data_query_id, reindex->arg1);
+							snprintf(query3, BIG_BUFSIZE, "UPDATE poller_reindex SET assert_value='%s' WHERE host_id='%i' AND data_query_id='%i' and arg1='%s'", poll_result, host_id, reindex->data_query_id, reindex->arg1);
 							db_insert(&mysql, query3);
 
 							if ((assert_fail) &&
@@ -726,12 +726,12 @@
 									SET_UNDEFINED(snmp_oids[j].result);
 								}else {
 									/* remove double or single quotes from string */
-									snprintf(temp_result, BUFSIZE, "%s", strip_quotes(snmp_oids[j].result));
-									snprintf(snmp_oids[j].result, BUFSIZE, "%s", strip_alpha(temp_result));
+									snprintf(temp_result, BIG_BUFSIZE, "%s", strip_quotes(snmp_oids[j].result));
+									snprintf(snmp_oids[j].result, BIG_BUFSIZE, "%s", strip_alpha(temp_result));
 
 									/* detect erroneous non-numeric result */
 									if (!validate_result(snmp_oids[j].result)) {
-										snprintf(errstr, BUFSIZE, "%s", snmp_oids[j].result);
+										snprintf(errstr, BIG_BUFSIZE, "%s", snmp_oids[j].result);
 
 										if (!STRIMATCH(snmp_oids[j].result, "Nan")) {
 											SPINE_LOG(("Host[%i] DS[%i] WARNING: Result from SNMP not valid. Partial Result: %.100s...\n", host_id, poller_items[snmp_oids[j].array_position].local_data_id, errstr));
@@ -782,12 +782,12 @@
 								SET_UNDEFINED(snmp_oids[j].result);
 							}else {
 								/* remove double or single quotes from string */
-								snprintf(temp_result, BUFSIZE, "%s", strip_quotes(snmp_oids[j].result));
-								snprintf(snmp_oids[j].result, BUFSIZE, "%s", strip_alpha(temp_result));
+								snprintf(temp_result, BIG_BUFSIZE, "%s", strip_quotes(snmp_oids[j].result));
+								snprintf(snmp_oids[j].result, BIG_BUFSIZE, "%s", strip_alpha(temp_result));
 
 								/* detect erroneous non-numeric result */
 								if (!validate_result(snmp_oids[j].result)) {
-									snprintf(errstr, BUFSIZE, "%s", snmp_oids[j].result);
+									snprintf(errstr, BIG_BUFSIZE, "%s", snmp_oids[j].result);
 
 									if (!STRIMATCH(snmp_oids[j].result, "Nan")) {
 										SPINE_LOG(("Host[%i] DS[%i] WARNING: Result from SNMP not valid. Partial Result: %.20s...\n", host_id, poller_items[snmp_oids[j].array_position].local_data_id, errstr));
@@ -797,7 +797,7 @@
 								}
 							}
 
-							snprintf(poller_items[snmp_oids[j].array_position].result, BUFSIZE, "%s", snmp_oids[j].result);
+							snprintf(poller_items[snmp_oids[j].array_position].result, BIG_BUFSIZE, "%s", snmp_oids[j].result);
 
 							SPINE_LOG_MEDIUM(("Host[%i] DS[%i] SNMP: v%i: %s, dsname: %s, oid: %s, value: %s\n", host_id, poller_items[snmp_oids[j].array_position].local_data_id, host->snmp_version, host->hostname, poller_items[snmp_oids[j].array_position].rrd_name, poller_items[snmp_oids[j].array_position].arg1, poller_items[snmp_oids[j].array_position].result));
 
@@ -825,7 +825,7 @@
 					poll_result = exec_poll(host, poller_items[i].arg1);
 
 					/* remove double or single quotes from string */
-					snprintf(temp_result, BUFSIZE, "%s", strip_quotes(poll_result));
+					snprintf(temp_result, BIG_BUFSIZE, "%s", strip_quotes(poll_result));
 					snprintf(poller_items[i].result, sizeof(poller_items[i].result), "%s", strip_alpha(temp_result));
 
 					free(poll_result);
@@ -857,7 +857,7 @@
 					poll_result = php_cmd(poller_items[i].arg1, php_process);
 
 					/* remove double or single quotes from string */
-					snprintf(temp_result, BUFSIZE, "%s", strip_quotes(poll_result));
+					snprintf(temp_result, BIG_BUFSIZE, "%s", strip_quotes(poll_result));
 					snprintf(poller_items[i].result, sizeof(poller_items[i].result), "%s", strip_alpha(temp_result));
 
 					free(poll_result);
@@ -904,7 +904,7 @@
 					SET_UNDEFINED(snmp_oids[j].result);
 				}else{
 					/* remove double or single quotes from string */
-					snprintf(temp_result, BUFSIZE, "%s", strip_quotes(snmp_oids[j].result));
+					snprintf(temp_result, BIG_BUFSIZE, "%s", strip_quotes(snmp_oids[j].result));
 					snprintf(snmp_oids[j].result, sizeof(snmp_oids[j].result), "%s", strip_alpha(temp_result));
 
 					/* detect erroneous non-numeric result */
@@ -933,7 +933,7 @@
 		}
 
 		/* insert the query results into the database */
-		if (!(query3 = (char *)malloc(MAX_MYSQL_BUF_SIZE+BUFSIZE))) {
+		if (!(query3 = (char *)malloc(MAX_MYSQL_BUF_SIZE+BIG_BUFSIZE))) {
 			die("ERROR: Fatal malloc error: poller.c query3 oids!");
 		}
 		query3[0] = '\0';
@@ -943,7 +943,7 @@
 
 		i = 0;
 		while (i < rows_processed) {
-			snprintf(result_string, BUFSIZE, " (%i,'%s','%s','%s')",
+			snprintf(result_string, BIG_BUFSIZE, " (%i,'%s','%s','%s')",
 				poller_items[i].local_data_id,
 				poller_items[i].rrd_name,
 				host_time,
@@ -1081,7 +1081,7 @@
 	char *proc_command;
 	char *result_string;
 
-	if (!(result_string = (char *) malloc(BUFSIZE))) {
+	if (!(result_string = (char *) malloc(BIG_BUFSIZE))) {
 		die("ERROR: Fatal malloc error: poller.c exec_poll!");
 	}
 	result_string[0] = '\0';
@@ -1170,7 +1170,7 @@
 			break;
 		default:
 			/* get only one line of output, we will ignore the rest */
-			bytes_read = read(cmd_fd, result_string, BUFSIZE);
+			bytes_read = read(cmd_fd, result_string, BIG_BUFSIZE);
 			if (bytes_read > 0) {
 				result_string[bytes_read] = '\0';
 			}else{
diff -urN cacti-spine-0.8.7a.orig/spine.h cacti-spine-0.8.7a/spine.h
--- cacti-spine-0.8.7a.orig/spine.h	2007-11-25 19:40:21.000000000 -0800
+++ cacti-spine-0.8.7a/spine.h	2008-09-20 09:28:04.000000000 -0700
@@ -341,7 +341,7 @@
  */
 typedef struct target_struct {
 	int    target_id;
-	char   result[BUFSIZE];
+	char   result[BIG_BUFSIZE];
 	int    local_data_id;
 	int    action;
 	char   command[256];
diff -urN cacti-spine-0.8.7a.orig/sql.c cacti-spine-0.8.7a/sql.c
--- cacti-spine-0.8.7a.orig/sql.c	2007-11-25 19:40:21.000000000 -0800
+++ cacti-spine-0.8.7a/sql.c	2008-09-20 09:28:04.000000000 -0700
@@ -48,10 +48,10 @@
 int db_insert(MYSQL *mysql, const char *query) {
 	int    error;
 	int    error_count = 0;
-	char   query_frag[BUFSIZE];
+	char   query_frag[BIG_BUFSIZE];
 
 	/* save a fragment just in case */
-	snprintf(query_frag, BUFSIZE, "%s", query);
+	snprintf(query_frag, BIG_BUFSIZE, "%s", query);
 
 	/* show the sql query */
 	if (set.log_level == 5) {
@@ -102,10 +102,10 @@
 	int    error       = 0;
 	int    error_count = 0;
 
-	char   query_frag[BUFSIZE];
+	char   query_frag[BIG_BUFSIZE];
 
 	/* save a fragment just in case */
-	snprintf(query_frag, BUFSIZE, "%s", query);
+	snprintf(query_frag, BIG_BUFSIZE, "%s", query);
 
 	/* show the sql query */
 	SPINE_LOG_DEBUG(("DEBUG: SQL:'%s'", query_frag));
