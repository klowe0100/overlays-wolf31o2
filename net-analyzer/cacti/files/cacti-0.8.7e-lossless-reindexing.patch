diff -urN cacti-0.8.7e.pia26.orig/cli/rebuild_poller_cache.php cacti-0.8.7e/cli/rebuild_poller_cache.php
--- cacti-0.8.7e.pia26.orig/cli/rebuild_poller_cache.php	2009-06-28 09:07:11.000000000 -0700
+++ cacti-0.8.7e/cli/rebuild_poller_cache.php	2010-05-11 22:19:13.754330470 -0700
@@ -36,51 +36,61 @@
 $parms = $_SERVER["argv"];
 array_shift($parms);
 
-$debug = FALSE;
+$debug   = FALSE;
+$host_id = 0;
 
 foreach($parms as $parameter) {
 	@list($arg, $value) = @explode("=", $parameter);
 
 	switch ($arg) {
 	case "-d":
+	case "--debug":
 		$debug = TRUE;
 		break;
+	case "--host-id":
+		$host_id = trim($value);
+
+		if (!is_numeric($host_id)) {
+			echo "ERROR: You must supply a valid host-id to run this script!\n";
+			exit(1);
+		}
+
+		break;
 	case "-h":
-		display_help();
-		exit;
 	case "-v":
-		display_help();
-		exit;
 	case "--version":
-		display_help();
-		exit;
 	case "--help":
 		display_help();
+
 		exit;
 	default:
 		print "ERROR: Invalid Parameter " . $parameter . "\n\n";
 		display_help();
+
 		exit;
 	}
 }
 
 /* obtain timeout settings */
 $max_execution = ini_get("max_execution_time");
-$max_memory = ini_get("memory_limit");
 
-/* set new timeout and memory settings */
+/* set new timeout */
 ini_set("max_execution_time", "0");
-ini_set("memory_limit", "64M");
-
-/* clear the poller cache first */
-db_execute("truncate table poller_item");
 
 /* get the data_local Id's for the poller cache */
-$poller_data = db_fetch_assoc("select id from data_local");
+if ($host_id > 0) {
+	$poller_data  = db_fetch_assoc("SELECT id FROM data_local WHERE host_id=$host_id");
+} else {
+	$poller_data  = db_fetch_assoc("SELECT id FROM data_local");
+}
 
 /* initialize some variables */
 $current_ds = 1;
-$total_ds = sizeof($poller_data);
+$total_ds   = sizeof($poller_data);
+
+/* setting local_data_ids to an empty array saves time during updates */
+$local_data_ids = array();
+$poller_items   = array();
 
 /* issue warnings and start message if applicable */
 print "WARNING: Do not interrupt this script.  Rebuilding the Poller Cache can take quite some time\n";
@@ -90,22 +100,24 @@
 if (sizeof($poller_data) > 0) {
 	foreach ($poller_data as $data) {
 		if (!$debug) print ".";
-		update_poller_cache($data["id"], true);
+		$poller_items = array_merge($poller_items, update_poller_cache($data["id"]));
+
 		debug("Data Source Item '$current_ds' of '$total_ds' updated");
 		$current_ds++;
 	}
+
+	poller_update_poller_cache_from_buffer($local_data_ids, $poller_items);
 }
 if (!$debug) print "\n";
 
 /* poller cache rebuilt, restore runtime parameters */
 ini_set("max_execution_time", $max_execution);
-ini_set("memory_limit", $max_memory);
 
 /*	display_help - displays the usage of the function */
 function display_help () {
 	print "Cacti Rebuild Poller Cache Script 1.0, Copyright 2004-2009 - The Cacti Group\n\n";
-	print "usage: rebuild_poller_cache.php [-d] [-h] [--help] [-v] [--version]\n\n";
-	print "-d            - Display verbose output during execution\n";
+	print "usage: rebuild_poller_cache.php [--host-id=ID] [-d | --debug] [-h | --help | -v | --version]\n\n";
+	print "-d | --debug  - Display verbose output during execution\n";
 	print "-v --version  - Display this help message\n";
 	print "-h --help     - Display this help message\n";
 }
diff -urN cacti-0.8.7e.pia26.orig/data_sources.php cacti-0.8.7e/data_sources.php
--- cacti-0.8.7e.pia26.orig/data_sources.php	2010-05-11 21:38:06.243455796 -0700
+++ cacti-0.8.7e/data_sources.php	2010-05-11 22:19:22.353680643 -0700
@@ -288,7 +288,7 @@
 
 	/* update the poller cache last to make sure everything is fresh */
 	if ((!is_error_message()) && (!empty($local_data_id))) {
-		update_poller_cache($local_data_id, false);
+		update_poller_cache($local_data_id, true);
 	}
 
 	if ((isset($_POST["save_component_data_source_new"])) && (empty($_POST["data_template_id"]))) {
diff -urN cacti-0.8.7e.pia26.orig/host.php cacti-0.8.7e/host.php
--- cacti-0.8.7e.pia26.orig/host.php	2010-05-11 21:38:06.306536229 -0700
+++ cacti-0.8.7e/host.php	2010-05-11 22:19:22.370453548 -0700
@@ -189,12 +189,16 @@
 
 				/* update poller cache */
 				$data_sources = db_fetch_assoc("select id from data_local where host_id='" . $selected_items[$i] . "'");
+				$poller_items = array();
 
 				if (sizeof($data_sources) > 0) {
 					foreach ($data_sources as $data_source) {
-						update_poller_cache($data_source["id"], false);
+						$local_data_ids[] = $data_source["id"];
+						$poller_items     = array_merge($poller_items, update_poller_cache($data_source["id"]));
 					}
 				}
+
+				poller_update_poller_cache_from_buffer($local_data_ids, $poller_items);
 			}
 		}elseif ($_POST["drp_action"] == "3") { /* Disable Selected Devices */
 			for ($i=0;($i<count($selected_items));$i++) {
diff -urN cacti-0.8.7e.pia26.orig/lib/api_data_source.php cacti-0.8.7e/lib/api_data_source.php
--- cacti-0.8.7e.pia26.orig/lib/api_data_source.php	2009-06-28 09:07:11.000000000 -0700
+++ cacti-0.8.7e/lib/api_data_source.php	2010-05-11 22:19:31.190424638 -0700
@@ -107,7 +107,7 @@
 
 function api_data_source_enable($local_data_id) {
 	db_execute("UPDATE data_template_data SET active='on' WHERE local_data_id=$local_data_id");
-	update_poller_cache($local_data_id, false);
+	update_poller_cache($local_data_id, true);
  }
 
 function api_data_source_disable($local_data_id) {
@@ -175,4 +175,4 @@
 		}
 	}
 }
-?>
+?>
\ No newline at end of file
diff -urN cacti-0.8.7e.pia26.orig/lib/api_poller.php cacti-0.8.7e/lib/api_poller.php
--- cacti-0.8.7e.pia26.orig/lib/api_poller.php	2009-06-28 09:07:11.000000000 -0700
+++ cacti-0.8.7e/lib/api_poller.php	2010-05-11 22:19:31.214580641 -0700
@@ -23,22 +23,30 @@
 */
 
 function api_poller_cache_item_add($host_id, $host_field_override, $local_data_id, $rrd_step, $poller_action_id, $data_source_item_name, $num_rrd_items, $arg1 = "", $arg2 = "", $arg3 = "") {
-	$host = db_fetch_row("select
-		host.id,
-		host.hostname,
-		host.snmp_community,
-		host.snmp_version,
-		host.snmp_username,
-		host.snmp_password,
-		host.snmp_auth_protocol,
-		host.snmp_priv_passphrase,
-		host.snmp_priv_protocol,
-		host.snmp_context,
-		host.snmp_port,
-		host.snmp_timeout,
-		host.disabled
-		from host
-		where host.id=$host_id");
+	static $hosts = array();
+
+	if (!isset($hosts[$host_id])) {
+		$host = db_fetch_row("select
+			host.id,
+			host.hostname,
+			host.snmp_community,
+			host.snmp_version,
+			host.snmp_username,
+			host.snmp_password,
+			host.snmp_auth_protocol,
+			host.snmp_priv_passphrase,
+			host.snmp_priv_protocol,
+			host.snmp_context,
+			host.snmp_port,
+			host.snmp_timeout,
+			host.disabled
+			from host
+			where host.id=$host_id");
+
+		$hosts[$host_id] = $host;
+	} else {
+		$host = $hosts[$host_id];
+	}
 
 	/* the $host_field_override array can be used to override certain host fields in the poller cache */
 	if (isset($host)) {
@@ -48,11 +56,11 @@
 	if (isset($host["id"]) || (isset($host_id))) {
 		if (isset($host)) {
 			if ($host["disabled"] == "on") {
-				return true;
+				return;
 			}
 		} else {
 			if ($poller_action_id == 0) {
-				return true;
+				return;
 			}
 
 			$host["id"] = 0;
@@ -72,23 +80,18 @@
 		if ($poller_action_id == 0) {
 			if (($host["snmp_version"] < 1) || ($host["snmp_version"] > 3) ||
 				($host["snmp_community"] == "" && $host["snmp_version"] != 3)) {
-				return true;
+				return;
 			}
 		}
 
 		$rrd_next_step = api_poller_get_rrd_next_step($rrd_step, $num_rrd_items);
 
-		return db_execute("INSERT INTO poller_item (local_data_id, host_id, action,hostname,
-			snmp_community, snmp_version, snmp_timeout, snmp_username, snmp_password,
-			snmp_auth_protocol, snmp_priv_passphrase, snmp_priv_protocol, snmp_context, snmp_port, rrd_name, rrd_path,
-			rrd_num, rrd_step, rrd_next_step, arg1, arg2, arg3)
-			VALUES
-			($local_data_id, " . $host["id"] . ", $poller_action_id,'" . $host["hostname"] . "',
+		return "($local_data_id, " . "0, " . $host["id"] . ", $poller_action_id,'" . $host["hostname"] . "',
 			'" . $host["snmp_community"]       . "', '" . $host["snmp_version"]       . "', '" . $host["snmp_timeout"] . "',
 			'" . $host["snmp_username"]        . "', '" . $host["snmp_password"]      . "', '" . $host["snmp_auth_protocol"] . "',
 			'" . $host["snmp_priv_passphrase"] . "', '" . $host["snmp_priv_protocol"] . "', '" . $host["snmp_context"] . "',
 			'" . $host["snmp_port"]            . "', '$data_source_item_name', '"     . addslashes(clean_up_path(get_data_source_path($local_data_id, true))) . "',
-			'$num_rrd_items', '$rrd_step', '$rrd_next_step', '$arg1', '$arg2', '$arg3')");
+			'$num_rrd_items', '$rrd_step', '$rrd_next_step', '$arg1', '$arg2', '$arg3', '1')";
 	}
 }
 
diff -urN cacti-0.8.7e.pia26.orig/lib/data_query.php cacti-0.8.7e/lib/data_query.php
--- cacti-0.8.7e.pia26.orig/lib/data_query.php	2009-06-28 09:07:11.000000000 -0700
+++ cacti-0.8.7e/lib/data_query.php	2010-05-11 22:19:31.223580643 -0700
@@ -60,22 +60,31 @@
 }
 
 function get_data_query_array($snmp_query_id) {
-	global $config;
+	global $config, $data_query_xml_arrays;
 
 	include_once($config["library_path"] . "/xml.php");
 
-	$xml_file_path = db_fetch_cell("select xml_path from snmp_query where id=$snmp_query_id");
-	$xml_file_path = str_replace("<path_cacti>", $config["base_path"], $xml_file_path);
+	/* load the array into memory if it hasn't been done yet */
+	if (!isset($data_query_xml_arrays[$snmp_query_id])) {
+		$xml_file_path = db_fetch_cell("select xml_path from snmp_query where id=$snmp_query_id");
+		$xml_file_path = str_replace("<path_cacti>", $config["base_path"], $xml_file_path);
+	
+		if (!file_exists($xml_file_path)) {
+			debug_log_insert("data_query", "Could not find data query XML file at '$xml_file_path'");
+			return false;
+		}
+	
+		debug_log_insert("data_query", "Found data query XML file at '$xml_file_path'");
+	
+		$data = implode("",file($xml_file_path));
+	
+		$xml_data = xml2array($data);
 
-	if (!file_exists($xml_file_path)) {
-		debug_log_insert("data_query", "Could not find data query XML file at '$xml_file_path'");
-		return false;
+		/* store the array value to the global array for future reference */
+		$data_query_xml_arrays[$snmp_query_id] = $xml_data;
 	}
 
-	debug_log_insert("data_query", "Found data query XML file at '$xml_file_path'");
-
-	$data = implode("",file($xml_file_path));
-	return xml2array($data);
+	return $data_query_xml_arrays[$snmp_query_id];
 }
 
 function query_script_host($host_id, $snmp_query_id) {
@@ -100,7 +109,8 @@
 
 	debug_log_insert("data_query", "Executing script for list of indexes '$script_path'");
 
-	db_execute("delete from host_snmp_cache where host_id=$host_id and snmp_query_id=$snmp_query_id");
+	/* prepare an output array */
+	$output_array = array();
 
 	while (list($field_name, $field_array) = each($script_queries["fields"])) {
 		if ($field_array["direction"] == "input") {
@@ -113,11 +123,9 @@
 			for ($i=0;($i<sizeof($script_data_array));$i++) {
 				if (preg_match("/(.*)" . preg_quote($script_queries["output_delimeter"]) . "(.*)/", $script_data_array[$i], $matches)) {
 					$script_index = $matches[1];
-					$field_value = $matches[2];
+					$field_value  = $matches[2];
 
-					db_execute("replace into host_snmp_cache
-						(host_id,snmp_query_id,field_name,field_value,snmp_index,oid)
-						values ($host_id,$snmp_query_id,'$field_name','$field_value','$script_index','')");
+					$output_array[] = data_query_format_record($host_id, $snmp_query_id, $field_name, $field_value, $script_index, '');
 
 					debug_log_insert("data_query", "Found item [$field_name='$field_value'] index: $script_index");
 				}
@@ -125,6 +133,10 @@
 		}
 	}
 
+	if (sizeof($output_array)) {
+		data_query_update_host_cache_from_buffer($host_id, $snmp_query_id, $output_array);
+	}
+
 	return true;
 }
 
@@ -197,16 +209,15 @@
 		}
 	}
 
-	db_execute("delete from host_snmp_cache where host_id='$host_id' and snmp_query_id='$snmp_query_id'");
+	/* set an array to host all updates */
+	$output_array = array();
 
 	while (list($field_name, $field_array) = each($snmp_queries["fields"])) {
 		if ((!isset($field_array["oid"])) && ($field_array["source"] == "index")) {
 			for ($i=0; $i<sizeof($snmp_indexes); $i++) {
 				debug_log_insert("data_query", "Inserting index data for field '" . $field_name . "' [value='" . $snmp_indexes[$i]["value"] . "']");
 
-				db_execute("replace into host_snmp_cache
-					(host_id, snmp_query_id, field_name, field_value, snmp_index, oid)
-					values ('$host_id','$snmp_query_id','$field_name','" . $snmp_indexes[$i]["value"] . "','" . $snmp_indexes[$i]["value"] . "','')");
+				$output_array[] = data_query_format_record($host_id, $snmp_query_id, $field_name, $snmp_indexes[$i]["value"], $snmp_indexes[$i]["value"], '');
 			}
 		}else if (($field_array["method"] == "get") && ($field_array["direction"] == "input")) {
 			debug_log_insert("data_query", "Located input field '$field_name' [get]");
@@ -222,9 +233,7 @@
 
 					debug_log_insert("data_query", "Executing SNMP get for data @ '$oid' [value='$value']");
 
-					db_execute("replace into host_snmp_cache
-						(host_id,snmp_query_id,field_name,field_value,snmp_index,oid)
-						values ('$host_id','$snmp_query_id','$field_name','$value','" . $snmp_indexes[$i]["value"] . "','$oid')");
+					$output_array[] = data_query_format_record($host_id, $snmp_query_id, $field_name, $value, $snmp_indexes[$i]["value"],$oid);
 				}
 			}
 		}else if (($field_array["method"] == "walk") && ($field_array["direction"] == "input")) {
@@ -261,9 +270,7 @@
 
 					debug_log_insert("data_query", "Found item [$field_name='" . $snmp_data[$i]["value"] . "'] index: $snmp_index [from value]");
 
-					db_execute("replace into host_snmp_cache
-						(host_id,snmp_query_id,field_name,field_value,snmp_index,oid)
-						values ('$host_id','$snmp_query_id','$field_name','" . $snmp_data[$i]["value"] . "','$snmp_index','$oid')");
+					$output_array[] = data_query_format_record($host_id, $snmp_query_id, $field_name, $snmp_data[$i]["value"] , $snmp_index, $oid);
 				}
 			}elseif (substr($field_array["source"], 0, 11) == "OID/REGEXP:") {
 				for ($i=0; $i<sizeof($snmp_data); $i++) {
@@ -285,9 +292,7 @@
 
 					debug_log_insert("data_query", "Found item [$field_name='$value'] index: $snmp_index [from regexp oid parse]");
 
-					db_execute("replace into host_snmp_cache
-						(host_id,snmp_query_id,field_name,field_value,snmp_index,oid)
-						values ('$host_id','$snmp_query_id','$field_name','$value','$snmp_index','$oid')");
+					$output_array[] = data_query_format_record($host_id, $snmp_query_id, $field_name, $value, $snmp_index, $oid);
 				}
 			}elseif (substr($field_array["source"], 0, 13) == "VALUE/REGEXP:") {
 				for ($i=0; $i<sizeof($snmp_data); $i++) {
@@ -297,17 +302,72 @@
 
 					debug_log_insert("data_query", "Found item [$field_name='$value'] index: $snmp_index [from regexp value parse]");
 
-					db_execute("replace into host_snmp_cache
-						(host_id,snmp_query_id,field_name,field_value,snmp_index,oid)
-						values ('$host_id','$snmp_query_id','$field_name','$value','$snmp_index','$oid')");
+					$output_array[] = "('$host_id', '$snmp_query_id', '$field_name', '$value', '$snmp_index', '$oid', '1')";
 				}
 			}
 		}
 	}
 
+	if (sizeof($output_array)) {
+		data_query_update_host_cache_from_buffer($host_id, $snmp_query_id, $output_array);
+	}
+
 	return true;
 }
 
+function data_query_format_record($host_id, $snmp_query_id, $field_name, $value, $snmp_index, $oid) {
+	global $cnn_id;
+
+	return "($host_id, $snmp_query_id, " . $cnn_id->qstr($field_name) . ", " . $cnn_id->qstr($value) . ", " . $cnn_id->qstr($snmp_index) . ", " . $cnn_id->qstr($oid) . ", 1)";
+}
+
+function data_query_update_host_cache_from_buffer($host_id, $snmp_query_id, &$output_array) {
+	/* set all fields present value to 0, to mark the outliers when we are all done */
+	db_execute("UPDATE host_snmp_cache SET present=0 WHERE host_id='$host_id' AND snmp_query_id='$snmp_query_id'");
+
+	/* setup the database call */
+	$sql_prefix   = "INSERT INTO host_snmp_cache (host_id, snmp_query_id, field_name, field_value, snmp_index, oid, present) VALUES";
+	$sql_suffix   = " ON DUPLICATE KEY UPDATE field_value=VALUES(field_value), oid=VALUES(oid), present=VALUES(present)";
+
+	/* use a reasonable insert buffer, the default is 1MByte */
+	$max_packet   = 256000;
+
+	/* setup somme defaults */
+	$overhead     = strlen($sql_prefix) + strlen($sql_suffix);
+	$buf_len      = 0;
+	$buf_count    = 0;
+	$buffer       = "";
+
+	foreach($output_array as $record) {
+		if ($buf_count == 0) {
+			$delim = " ";
+		} else {
+			$delim = ", ";
+		}
+
+		$buffer .= $delim . $record;
+
+		$buf_len += strlen($record);
+
+		if (($overhead + $buf_len) > ($max_packet - 1024)) {
+			db_execute($sql_prefix . $buffer . $sql_suffix);
+
+			$buffer    = "";
+			$buf_len   = 0;
+			$buf_count = 0;
+		} else {
+			$buf_count++;
+		}
+	}
+
+	if ($buf_count > 0) {
+		db_execute($sql_prefix . $buffer . $sql_suffix);
+	}
+
+	/* remove stale records from the host cache */
+	db_execute("DELETE FROM host_snmp_cache WHERE host_id='$host_id' AND snmp_query_id='$snmp_query_id' AND present='0'");
+}
+
 /* data_query_index - returns an array containing the data query ID and index value given
 	a data query index type/value combination and a host ID
    @arg $index_type - the name of the index to match
diff -urN cacti-0.8.7e.pia26.orig/lib/poller.php cacti-0.8.7e/lib/poller.php
--- cacti-0.8.7e.pia26.orig/lib/poller.php	2010-05-11 21:38:06.400578966 -0700
+++ cacti-0.8.7e/lib/poller.php	2010-05-11 22:19:31.235397960 -0700
@@ -191,7 +191,7 @@
 					$host["snmp_timeout"],
 					SNMP_POLLER);
 
-				array_push($recache_stack, "insert into poller_reindex (host_id,data_query_id,action,op,assert_value,arg1) values ($host_id,$data_query_id,0,'<','$assert_value','$oid_uptime')");
+				$recache_stack[] = "('$host_id', '$data_query_id', '0', '<', '$assert_value', '$oid_uptime', '1')";
 			}
 
 			break;
@@ -202,11 +202,11 @@
 
 			if ($data_query_type == DATA_INPUT_TYPE_SNMP_QUERY) {
 				if (isset($data_query_xml["oid_num_indexes"])) {
-					array_push($recache_stack, "insert into poller_reindex (host_id, data_query_id, action, op, assert_value, arg1) values ($host_id, $data_query_id, 0, '=', '$assert_value', '" . $data_query_xml["oid_num_indexes"] . "')");
+					$recache_stack[] = "($host_id, $data_query_id, 0, '=', '$assert_value', '" . $data_query_xml["oid_num_indexes"] . "', '1')";
 				}
 			}else if ($data_query_type == DATA_INPUT_TYPE_SCRIPT_QUERY) {
 				if (isset($data_query_xml["arg_num_indexes"])) {
-					array_push($recache_stack, "insert into poller_reindex (host_id, data_query_id, action, op, assert_value, arg1) values ($host_id, $data_query_id, 1, '=', '$assert_value', '" . get_script_query_path((isset($data_query_xml["arg_prepend"]) ? $data_query_xml["arg_prepend"] . " ": "") . $data_query_xml["arg_num_indexes"], $data_query_xml["script_path"], $host_id) . "')");
+					$recache_stack[] = "($host_id, $data_query_id, 1, '=', '$assert_value', '" . get_script_query_path((isset($data_query_xml["arg_prepend"]) ? $data_query_xml["arg_prepend"] . " ": "") . $data_query_xml["arg_num_indexes"], $data_query_xml["script_path"], $host_id) . "', '1')";
 				}
 			}
 
@@ -219,9 +219,9 @@
 					$assert_value = $index["field_value"];
 
 					if ($data_query_type == DATA_INPUT_TYPE_SNMP_QUERY) {
-						array_push($recache_stack, "insert into poller_reindex (host_id, data_query_id, action, op, assert_value, arg1) values ($host_id, $data_query_id, 0, '=', '$assert_value', '" . $data_query_xml["fields"]{$data_query["sort_field"]}["oid"] . "." . $index["snmp_index"] . "')");
+						$recache_stack[] = "($host_id, $data_query_id, 0, '=', '$assert_value', '" . $data_query_xml["fields"]{$data_query["sort_field"]}["oid"] . "." . $index["snmp_index"] . "', '1')";
 					}else if ($data_query_type == DATA_INPUT_TYPE_SCRIPT_QUERY) {
-						array_push($recache_stack, "insert into poller_reindex (host_id, data_query_id, action, op, assert_value, arg1) values ($host_id, $data_query_id, 1, '=', '$assert_value', '" . get_script_query_path((isset($data_query_xml["arg_prepend"]) ? $data_query_xml["arg_prepend"] . " ": "") . $data_query_xml["arg_get"] . " " . $data_query_xml["fields"]{$data_query["sort_field"]}["query_name"] . " " . $index["snmp_index"], $data_query_xml["script_path"], $host_id) . "')");
+						$recache_stack[] = "('$host_id', '$data_query_id', '1', '=', '$assert_value', '" . get_script_query_path((isset($data_query_xml["arg_prepend"]) ? $data_query_xml["arg_prepend"] . " ": "") . $data_query_xml["arg_get"] . " " . $data_query_xml["fields"]{$data_query["sort_field"]}["query_name"] . " " . $index["snmp_index"], $data_query_xml["script_path"], $host_id) . "', '1')";
 					}
 				}
 			}
@@ -229,12 +229,56 @@
 			break;
 	}
 
-	/* save the delete for last since we need to reference this table in the code above */
-	db_execute("delete from poller_reindex where host_id=$host_id and data_query_id=$data_query_id");
+	if (sizeof($recache_stack)) {
+		poller_update_poller_reindex_from_buffer($host_id, $data_query_id, $recache_stack);
+	}
+}
 
-	for ($i=0; $i<count($recache_stack); $i++) {
-		db_execute($recache_stack[$i]);
+function poller_update_poller_reindex_from_buffer($host_id, $data_query_id, &$recache_stack) {
+	/* set all fields present value to 0, to mark the outliers when we are all done */
+	db_execute("UPDATE poller_reindex SET present=0 WHERE host_id='$host_id' AND data_query_id='$data_query_id'");
+
+	/* setup the database call */
+	$sql_prefix   = "INSERT INTO poller_reindex (host_id, data_query_id, action, op, assert_value, arg1, present) VALUES";
+	$sql_suffix   = " ON DUPLICATE KEY UPDATE action=VALUES(action), op=VALUES(op), assert_value=VALUES(assert_value), present=VALUES(present)";
+
+	/* use a reasonable insert buffer, the default is 1MByte */
+	$max_packet   = 256000;
+
+	/* setup somme defaults */
+	$overhead     = strlen($sql_prefix) + strlen($sql_suffix);
+	$buf_len      = 0;
+	$buf_count    = 0;
+	$buffer       = "";
+
+	foreach($recache_stack AS $record) {
+		if ($buf_count == 0) {
+			$delim = " ";
+		} else {
+			$delim = ", ";
+		}
+
+		$buffer .= $delim . $record;
+
+		$buf_len += strlen($record);
+
+		if (($overhead + $buf_len) > ($max_packet - 1024)) {
+			db_execute($sql_prefix . $buffer . $sql_suffix);
+
+			$buffer    = "";
+			$buf_len   = 0;
+			$buf_count = 0;
+		} else {
+			$buf_count++;
+		}
 	}
+
+	if ($buf_count > 0) {
+		db_execute($sql_prefix . $buffer . $sql_suffix);
+	}
+
+	/* remove stale records from the poller reindex */
+	db_execute("DELETE FROM poller_reindex WHERE host_id='$host_id' AND data_query_id='$data_query_id' AND present='0'");
 }
 
 /* process_poller_output - grabs data from the 'poller_output' table and feeds the *completed*
diff -urN cacti-0.8.7e.pia26.orig/lib/utility.php cacti-0.8.7e/lib/utility.php
--- cacti-0.8.7e.pia26.orig/lib/utility.php	2010-05-11 21:38:00.057578967 -0700
+++ cacti-0.8.7e/lib/utility.php	2010-05-11 22:19:31.252948519 -0700
@@ -23,33 +23,44 @@
 */
 
 function repopulate_poller_cache() {
-	db_execute("truncate table poller_item");
-
-	$poller_data = db_fetch_assoc("select id from data_local");
+	$poller_data    = db_fetch_assoc("select id from data_local");
+	$poller_items   = array();
+	$local_data_ids = array();
 
 	if (sizeof($poller_data) > 0) {
-	foreach ($poller_data as $data) {
-		update_poller_cache($data["id"], true);
-	}
+		foreach ($poller_data as $data) {
+			$poller_items = array_merge($poller_items, update_poller_cache($data["id"]));
+		}
+
+		poller_update_poller_cache_from_buffer($local_data_ids, $poller_items);
+
 	}
 }
 
 function update_poller_cache_from_query($host_id, $data_query_id) {
 	$poller_data = db_fetch_assoc("select id from data_local where host_id = '$host_id' and snmp_query_id = '$data_query_id'");
 
+	$poller_items = array();
+
 	if (sizeof($poller_data) > 0) {
 		foreach ($poller_data as $data) {
-			update_poller_cache($data["id"]);
+			$local_data_ids[] = $data["id"];
+
+			$poller_items = array_merge($poller_items, update_poller_cache($data["id"]));
 		}
+
+		poller_update_poller_cache_from_buffer($local_data_ids, $poller_items);
 	}
 }
 
-function update_poller_cache($local_data_id, $truncate_performed = false) {
+function update_poller_cache($local_data_id, $commit = false) {
 	global $config;
 
 	include_once($config["library_path"] . "/data_query.php");
 	include_once($config["library_path"] . "/api_poller.php");
 
+	$poller_items = array();
+
 	$data_input = db_fetch_row("select
 		data_input.id,
 		data_input.type_id,
@@ -63,11 +74,6 @@
 
 	$data_source = db_fetch_row("select host_id,snmp_query_id,snmp_index from data_local where id=$local_data_id");
 
-	/* clear cache for this local_data_id */
-	if (!$truncate_performed) {
-		db_execute("delete from poller_item where local_data_id=$local_data_id");
-	}
-
 	/* we have to perform some additional sql queries if this is a "query" */
 	if (($data_input["type_id"] == DATA_INPUT_TYPE_SNMP_QUERY) ||
 		($data_input["type_id"] == DATA_INPUT_TYPE_SCRIPT_QUERY) ||
@@ -113,33 +119,84 @@
 				$data_source_item_name = "";
 			}
 
-			api_poller_cache_item_add($data_source["host_id"], array(), $local_data_id, $data_input["rrd_step"], $action, $data_source_item_name, 1, addslashes($script_path));
+			$poller_items[] = api_poller_cache_item_add($data_source["host_id"], array(), $local_data_id, $data_input["rrd_step"], $action, $data_source_item_name, 1, addslashes($script_path));
 		}else if ($data_input["type_id"] == DATA_INPUT_TYPE_SNMP) { /* snmp */
-			$host_fields = array_rekey(db_fetch_assoc("select
+			/* get the host override fields */
+			$data_template_id = db_fetch_cell("SELECT data_template_id FROM data_template_data WHERE local_data_id=$local_data_id");
+
+			/* get host fields first */
+			$host_fields = array_rekey(db_fetch_assoc("SELECT
 				data_input_fields.type_code,
 				data_input_data.value
-				from data_input_fields left join data_input_data
-				on (data_input_fields.id=data_input_data.data_input_field_id and data_input_data.data_template_data_id=" . $data_input["data_template_data_id"] . ")
-				where (data_input_fields.type_code='snmp_oid'
-					or data_input_fields.type_code='hostname'
-					or data_input_fields.type_code='snmp_community'
-					or data_input_fields.type_code='snmp_username'
-					or data_input_fields.type_code='snmp_password'
-					or data_input_fields.type_code='snmp_auth_protocol'
-					or data_input_fields.type_code='snmp_priv_passphrase'
-					or data_input_fields.type_code='snmp_priv_protocol'
-					or data_input_fields.type_code='snmp_context'
-					or data_input_fields.type_code='snmp_version'
-					or data_input_fields.type_code='snmp_port'
-					or data_input_fields.type_code='snmp_timeout')
-				and data_input_data.value != ''"), "type_code", "value");
+				FROM data_input_fields
+				LEFT JOIN data_input_data
+				ON (data_input_fields.id=data_input_data.data_input_field_id and data_input_data.data_template_data_id=" . $data_input["data_template_data_id"] . ")
+				WHERE ((type_code LIKE 'snmp_%') OR (type_code='hostname'))
+				AND data_input_data.value != ''"), "type_code", "value");
+
+			$data_template_fields = array_rekey(db_fetch_assoc("SELECT
+				data_input_fields.type_code,
+				data_input_data.value
+				FROM data_input_fields
+				LEFT JOIN data_input_data
+				ON (data_input_fields.id=data_input_data.data_input_field_id and data_input_data.data_template_data_id=$data_template_id)
+				WHERE ((type_code LIKE 'snmp_%') OR (type_code='hostname'))
+				AND data_template_data_id=$data_template_id
+				AND data_input_data.value != ''"), "type_code", "value");
+
+			if (sizeof($host_fields)) {
+				if (sizeof($data_template_fields)) {
+				foreach($data_template_fields as $key => $value) {
+					if (!isset($host_fields[$key])) {
+						$host_fields[$key] = $value;
+					}
+				}
+				}
+			} elseif (sizeof($data_template_fields)) {
+				$host_fields = $data_template_fields;
+			}
 
 			$data_template_rrd_id = db_fetch_cell("select id from data_template_rrd where local_data_id=$local_data_id");
 
-			api_poller_cache_item_add($data_source["host_id"], $host_fields, $local_data_id, $data_input["rrd_step"], 0, get_data_source_item_name($data_template_rrd_id), 1, (isset($host_fields["snmp_oid"]) ? $host_fields["snmp_oid"] : ""));
+			$poller_items[] = api_poller_cache_item_add($data_source["host_id"], $host_fields, $local_data_id, $data_input["rrd_step"], 0, get_data_source_item_name($data_template_rrd_id), 1, (isset($host_fields["snmp_oid"]) ? $host_fields["snmp_oid"] : ""));
 		}else if ($data_input["type_id"] == DATA_INPUT_TYPE_SNMP_QUERY) { /* snmp query */
 			$snmp_queries = get_data_query_array($data_source["snmp_query_id"]);
 
+			/* get the host override fields */
+			$data_template_id = db_fetch_cell("SELECT data_template_id FROM data_template_data WHERE local_data_id=$local_data_id");
+
+			/* get host fields first */
+			$host_fields = array_rekey(db_fetch_assoc("SELECT
+				data_input_fields.type_code,
+				data_input_data.value
+				FROM data_input_fields
+				LEFT JOIN data_input_data
+				ON (data_input_fields.id=data_input_data.data_input_field_id and data_input_data.data_template_data_id=" . $data_input["data_template_data_id"] . ")
+				WHERE ((type_code LIKE 'snmp_%') OR (type_code='hostname'))
+				AND data_input_data.value != ''"), "type_code", "value");
+
+			$data_template_fields = array_rekey(db_fetch_assoc("SELECT
+				data_input_fields.type_code,
+				data_input_data.value
+				FROM data_input_fields
+				LEFT JOIN data_input_data
+				ON (data_input_fields.id=data_input_data.data_input_field_id and data_input_data.data_template_data_id=$data_template_id)
+				WHERE ((type_code LIKE 'snmp_%') OR (type_code='hostname'))
+				AND data_template_data_id=$data_template_id
+				AND data_input_data.value != ''"), "type_code", "value");
+
+			if (sizeof($host_fields)) {
+				if (sizeof($data_template_fields)) {
+				foreach($data_template_fields as $key => $value) {
+					if (!isset($host_fields[$key])) {
+						$host_fields[$key] = $value;
+					}
+				}
+				}
+			} elseif (sizeof($data_template_fields)) {
+				$host_fields = $data_template_fields;
+			}
+
 			if (sizeof($outputs) > 0) {
 			foreach ($outputs as $output) {
 				if (isset($snmp_queries["fields"]{$output["snmp_field_name"]}["oid"])) {
@@ -151,13 +208,48 @@
 				}
 
 				if (!empty($oid)) {
-					api_poller_cache_item_add($data_source["host_id"], array(), $local_data_id, $data_input["rrd_step"], 0, get_data_source_item_name($output["data_template_rrd_id"]), sizeof($outputs), $oid);
+					$poller_items[] = api_poller_cache_item_add($data_source["host_id"], $host_fields, $local_data_id, $data_input["rrd_step"], 0, get_data_source_item_name($output["data_template_rrd_id"]), sizeof($outputs), $oid);
 				}
 			}
 			}
 		}else if (($data_input["type_id"] == DATA_INPUT_TYPE_SCRIPT_QUERY) || ($data_input["type_id"] == DATA_INPUT_TYPE_QUERY_SCRIPT_SERVER)) { /* script query */
 			$script_queries = get_data_query_array($data_source["snmp_query_id"]);
 
+			/* get the host override fields */
+			$data_template_id = db_fetch_cell("SELECT data_template_id FROM data_template_data WHERE local_data_id=$local_data_id");
+
+			/* get host fields first */
+			$host_fields = array_rekey(db_fetch_assoc("SELECT
+				data_input_fields.type_code,
+				data_input_data.value
+				FROM data_input_fields
+				LEFT JOIN data_input_data
+				ON (data_input_fields.id=data_input_data.data_input_field_id and data_input_data.data_template_data_id=" . $data_input["data_template_data_id"] . ")
+				WHERE ((type_code LIKE 'snmp_%') OR (type_code='hostname'))
+				AND data_input_data.value != ''"), "type_code", "value");
+
+			$data_template_fields = array_rekey(db_fetch_assoc("SELECT
+				data_input_fields.type_code,
+				data_input_data.value
+				FROM data_input_fields
+				LEFT JOIN data_input_data
+				ON (data_input_fields.id=data_input_data.data_input_field_id and data_input_data.data_template_data_id=$data_template_id)
+				WHERE ((type_code LIKE 'snmp_%') OR (type_code='hostname'))
+				AND data_template_data_id=$data_template_id
+				AND data_input_data.value != ''"), "type_code", "value");
+
+			if (sizeof($host_fields)) {
+				if (sizeof($data_template_fields)) {
+				foreach($data_template_fields as $key => $value) {
+					if (!isset($host_fields[$key])) {
+						$host_fields[$key] = $value;
+					}
+				}
+				}
+			} elseif (sizeof($data_template_fields)) {
+				$host_fields = $data_template_fields;
+			}
+
 			if (sizeof($outputs) > 0) {
 				foreach ($outputs as $output) {
 					if (isset($script_queries["fields"]{$output["snmp_field_name"]}["query_name"])) {
@@ -177,12 +269,18 @@
 					}
 
 					if (isset($script_path)) {
-						api_poller_cache_item_add($data_source["host_id"], array(), $local_data_id, $data_input["rrd_step"], $action, get_data_source_item_name($output["data_template_rrd_id"]), sizeof($outputs), addslashes($script_path));
+						$poller_items[] = api_poller_cache_item_add($data_source["host_id"], $host_fields, $local_data_id, $data_input["rrd_step"], $action, get_data_source_item_name($output["data_template_rrd_id"]), sizeof($outputs), addslashes($script_path));
 					}
 				}
 			}
 		}
 	}
+
+	if ($commit) {
+		poller_update_poller_cache_from_buffer((array)$local_data_id, $poller_items);
+	} else {
+		return $poller_items;
+	}
 }
 
 function push_out_data_input_method($data_input_id) {
@@ -190,46 +288,142 @@
 		FROM data_template_data
 		WHERE data_input_id='$data_input_id'");
 
+	$poller_items = array();
+
 	if (sizeof($local_data_ids)) {
 	foreach($local_data_ids as $row) {
-		update_poller_cache($row["local_data_id"]);
+		$local_data_ids[] = $row["local_data_id"];
+
+		$poller_items = array_merge($poller_items, update_poller_cache($row["local_data_id"]));
+	}
+	}
+
+	poller_update_poller_cache_from_buffer($local_data_ids, $poller_items);
+}
+
+function poller_update_poller_cache_from_buffer($local_data_ids, &$poller_items) {
+	/* set all fields present value to 0, to mark the outliers when we are all done */
+	if (sizeof($local_data_ids)) {
+		$count = 0;
+		foreach($local_data_ids as $id) {
+			if ($count == 0) {
+				$ids = $id;
+			} else {
+				$ids .= ", " . $id;
+			}
+			$count++;
+		}
+
+		db_execute("UPDATE poller_item SET present=0 WHERE local_data_id IN($ids)");
+	} else {
+		db_execute("UPDATE poller_item SET present=0");
+	}
+
+	/* setup the database call */
+	$sql_prefix   = "INSERT INTO poller_item (local_data_id, poller_id, host_id, action, hostname, " .
+			"snmp_community, snmp_version, snmp_timeout, snmp_username, snmp_password, " .
+			"snmp_auth_protocol, snmp_priv_passphrase, snmp_priv_protocol, snmp_context, " .
+			"snmp_port, rrd_name, rrd_path, rrd_num, rrd_step, rrd_next_step, arg1, arg2, arg3, present) " .
+			"VALUES";
+
+	$sql_suffix   = " ON DUPLICATE KEY UPDATE poller_id=VALUES(poller_id), host_id=VALUES(host_id), action=VALUES(action), hostname=VALUES(hostname), " .
+		"snmp_community=VALUES(snmp_community), snmp_version=VALUES(snmp_version), snmp_timeout=VALUES(snmp_timeout), " .
+		"snmp_username=VALUES(snmp_username), snmp_password=VALUES(snmp_password), snmp_auth_protocol=VALUES(snmp_auth_protocol), " .
+		"snmp_priv_passphrase=VALUES(snmp_priv_passphrase), snmp_priv_protocol=VALUES(snmp_priv_protocol), " .
+		"snmp_context=VALUES(snmp_context), snmp_port=VALUES(snmp_port), rrd_path=VALUES(rrd_path), rrd_num=VALUES(rrd_num), " .
+		"rrd_step=VALUES(rrd_step), rrd_next_step=VALUES(rrd_next_step), arg1=VALUES(arg1), arg2=VALUES(arg2), " .
+		"arg3=VALUES(arg3), present=VALUES(present)";
+
+	/* use a reasonable insert buffer, the default is 1MByte */
+	$max_packet   = 256000;
+
+	/* setup somme defaults */
+	$overhead     = strlen($sql_prefix) + strlen($sql_suffix);
+	$buf_len      = 0;
+	$buf_count    = 0;
+	$buffer       = "";
+
+	foreach($poller_items AS $record) {
+		/* take care of invalid entries */
+		if (strlen($record) == 0) continue;
+
+		if ($buf_count == 0) {
+			$delim = " ";
+		} else {
+			$delim = ", ";
+		}
+
+		$buffer .= $delim . $record;
+
+		$buf_len += strlen($record);
+
+		if (($overhead + $buf_len) > ($max_packet - 1024)) {
+			db_execute($sql_prefix . $buffer . $sql_suffix);
+
+			$buffer    = "";
+			$buf_len   = 0;
+			$buf_count = 0;
+		} else {
+			$buf_count++;
+		}
 	}
+
+	if ($buf_count > 0) {
+		db_execute($sql_prefix . $buffer . $sql_suffix);
 	}
+
+	/* remove stale records from the poller cache */
+	db_execute("DELETE FROM poller_item WHERE present='0'");
 }
 
 function push_out_host($host_id, $local_data_id = 0, $data_template_id = 0) {
 	/* ok here's the deal: first we need to find every data source that uses this host.
 	then we go through each of those data sources, finding each one using a data input method
 	with "special fields". if we find one, fill it will the data here from this host */
+	/* setup the poller items array */
+	$poller_items   = array();
+	$local_data_ids = array();
+	$hosts          = array();
+	$sql_where      = "";
 
-	if (!empty($data_template_id)) {
-		$hosts = db_fetch_assoc("select host_id from data_local where data_template_id=$data_template_id group by host_id");
+	/* setup the sql where, and if using a host, get it's host information */
+	if ($host_id != 0) {
+		/* get all information about this host so we can write it to the data source */
+		$hosts[$host_id] = db_fetch_row("select * from host where id=$host_id");
 
-		if (sizeof($hosts) > 0) {
-		foreach ($hosts as $host) {
-			push_out_host($host["host_id"]);
-		}
-		}
+		$sql_where .= " AND data_local.host_id=$host_id";
 	}
 
-	if (empty($host_id)) { return 0; }
+	/* sql where fom local_data_id */
+	if ($local_data_id != 0) {
+		$sql_where .= " AND data_local.id=$local_data_id";
+	}
 
-	/* get all information about this host so we can write it to the data source */
-	$host = db_fetch_row("select * from host where id=$host_id");
+	/* sql where fom data_template_id */
+	if ($data_template_id != 0) {
+		$sql_where .= " AND data_template_data.data_template_id=$data_template_id";
+	}
 
-	$data_sources = db_fetch_assoc("select
+	$data_sources = db_fetch_assoc("SELECT
 		data_template_data.id,
 		data_template_data.data_input_id,
 		data_template_data.local_data_id,
-		data_template_data.local_data_template_data_id
-		from (data_local,data_template_data)
-		where " . (empty($local_data_id) ? "data_local.host_id=$host_id" : "data_local.id=$local_data_id") . "
-		and data_local.id=data_template_data.local_data_id
-		and data_template_data.data_input_id>0");
+		data_template_data.local_data_template_data_id,
+		data_local.host_id
+		FROM (data_local, data_template_data)
+		WHERE data_local.id=data_template_data.local_data_id
+		AND data_template_data.data_input_id>0
+		$sql_where");
 
 	/* loop through each matching data source */
 	if (sizeof($data_sources) > 0) {
 	foreach ($data_sources as $data_source) {
+		/* set the host information */
+		if (!isset($hosts[$data_source["host_id"]])) {
+			$hosts[$data_source["host_id"]] = db_fetch_row("select * from host where id=" . $data_source["host_id"]);
+		}
+		$host = $hosts[$data_source["host_id"]];
+
 		/* get field information from the data template */
 		if (!isset($template_fields{$data_source["local_data_template_data_id"]})) {
 			$template_fields{$data_source["local_data_template_data_id"]} = db_fetch_assoc("select
@@ -258,10 +452,15 @@
 		}
 		}
 
-		/* make sure to update the poller cache as well */
-		update_poller_cache($data_source["local_data_id"], false);
+		/* flag an update to the poller cache as well */
+		$local_data_ids[] = $data_source["local_data_id"];
+		$poller_items     = array_merge($poller_items, update_poller_cache($data_source["local_data_id"]));
 	}
 	}
+
+	if (sizeof($local_data_ids)) {
+		poller_update_poller_cache_from_buffer($local_data_ids, $poller_items);
+	}
 }
 
 function duplicate_graph($_local_graph_id, $_graph_template_id, $graph_title) {
@@ -341,14 +540,14 @@
 		foreach ($graph_template_inputs as $graph_template_input) {
 			unset($save);
 
-			$save["id"] = 0;
+			$save["id"]                = 0;
 			$save["graph_template_id"] = $graph_template_id;
-			$save["name"] = $graph_template_input["name"];
-			$save["description"] = $graph_template_input["description"];
-			$save["column_name"] = $graph_template_input["column_name"];
+			$save["name"]              = $graph_template_input["name"];
+			$save["description"]       = $graph_template_input["description"];
+			$save["column_name"]       = $graph_template_input["column_name"];
 			$save["hash"]              = get_hash_graph_template(0, "graph_template_input");
 
-			$graph_template_input_id = sql_save($save, "graph_template_input");
+			$graph_template_input_id   = sql_save($save, "graph_template_input");
 
 			$graph_template_input_defs = db_fetch_assoc("select * from graph_template_input_defs where graph_template_input_id=" . $graph_template_input["id"]);
 
@@ -433,10 +632,10 @@
 		unset($save);
 		reset($struct_data_source_item);
 
-		$save["id"] = 0;
-		$save["local_data_id"] = (isset($local_data_id) ? $local_data_id : 0);
+		$save["id"]                         = 0;
+		$save["local_data_id"]              = (isset($local_data_id) ? $local_data_id : 0);
 		$save["local_data_template_rrd_id"] = (isset($data_template_rrd["local_data_template_rrd_id"]) ? $data_template_rrd["local_data_template_rrd_id"] : 0);
-		$save["data_template_id"] = (!empty($_local_data_id) ? $data_template_rrd["data_template_id"] : $data_template_id);
+		$save["data_template_id"]           = (!empty($_local_data_id) ? $data_template_rrd["data_template_id"] : $data_template_id);
 		if ($save["local_data_id"] == 0) {
 			$save["hash"]                   = get_hash_data_template($data_template_rrd["local_data_template_rrd_id"], "data_template_item");
 		} else {
diff -urN cacti-0.8.7e.pia26.orig/lossless_reindexing.sql cacti-0.8.7e/lossless_reindexing.sql
--- cacti-0.8.7e.pia26.orig/lossless_reindexing.sql	1969-12-31 16:00:00.000000000 -0800
+++ cacti-0.8.7e/lossless_reindexing.sql	2010-05-11 22:18:49.954453821 -0700
@@ -0,0 +1,3 @@
+ALTER TABLE host_snmp_cache ADD COLUMN present tinyint NOT NULL DEFAULT '1' AFTER `oid`, ADD INDEX present USING BTREE (present);
+ALTER TABLE poller_item ADD COLUMN present tinyint NOT NULL DEFAULT '1' AFTER `action`, ADD INDEX present USING BTREE (present);
+ALTER TABLE poller_reindex ADD COLUMN present tinyint NOT NULL DEFAULT '1' AFTER `action`, ADD INDEX present USING BTREE (present);
\ No newline at end of file
diff -urN cacti-0.8.7e.pia26.orig/README.lossless_reindexing cacti-0.8.7e/README.lossless_reindexing
--- cacti-0.8.7e.pia26.orig/README.lossless_reindexing	1969-12-31 16:00:00.000000000 -0800
+++ cacti-0.8.7e/README.lossless_reindexing	2010-05-11 22:18:21.102453552 -0700
@@ -0,0 +1,33 @@
+--------------------------------------------------------------------
+Lossless Reindexing Patch for Cacti 0.8.7e
+--------------------------------------------------------------------
+
+Description:
+--------------------------------------------------------------------
+This patch allows for a 66% increase in reindex performance and also
+does reindexing a lossless manner.  It is important for large sites
+with numerous indexed values.  It works optimally with SNMP v2 devices
+but will also work well with other classes of devices.
+
+This patch is made available for 0.8.7, but not in the mainline code.
+It is already incorporated into the 0.8.8 core.
+
+Installation:
+--------------------------------------------------------------------
+There are essentially two steps to installing this patch.  The first
+is to apply the database changes in the install directory.  You can
+do this by running the following command:
+
+mysql cacti < install.sql
+
+The second step is to choose your fileset to use.  It will either be
+the PIA version or the Non-PIA version of Cacti.  You will simply 
+copy the appropriate files over your existing files.
+
+Notes:
+--------------------------------------------------------------------
+This patch is designed for 0.8.7e of Cacti and no other release.
+It is also only compatible with only PIA 2.5.
+There are no User Interface changes with this patch.  It's all
+plumbing.
+
