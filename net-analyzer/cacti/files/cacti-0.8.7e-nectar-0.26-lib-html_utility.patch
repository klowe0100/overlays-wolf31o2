diff -burN cacti-0.8.7e.pia26.orig/lib/html_utility.php cacti-0.8.7e.pia26/lib/html_utility.php
--- cacti-0.8.7e.pia26.orig/lib/html_utility.php	2009-06-28 09:07:11.000000000 -0700
+++ cacti-0.8.7e.pia26/lib/html_utility.php	2010-05-16 14:33:13.799702437 -0700
@@ -38,28 +38,42 @@
    @returns - $form_array with all available variables substituted with their
      proper values */
 function inject_form_variables(&$form_array, $arg1 = array(), $arg2 = array(), $arg3 = array(), $arg4 = array()) {
-	$check_fields = array("value", "array", "friendly_name", "description", "sql", "sql_print", "form_id", "items");
+	$check_fields = array("value", "array", "friendly_name", "description", "sql", "sql_print", "form_id", "items", "tree_id");
 
 	/* loop through each available field */
+	if (sizeof($form_array)) {
 	while (list($field_name, $field_array) = each($form_array)) {
 		/* loop through each sub-field that we are going to check for variables */
 		foreach ($check_fields as $field_to_check) {
 			if (isset($field_array[$field_to_check]) && (is_array($form_array[$field_name][$field_to_check]))) {
 				/* if the field/sub-field combination is an array, resolve it recursively */
 				$form_array[$field_name][$field_to_check] = inject_form_variables($form_array[$field_name][$field_to_check], $arg1);
-			}elseif (isset($field_array[$field_to_check]) && (!is_array($field_array[$field_to_check])) && (ereg("\|(arg[123]):([a-zA-Z0-9_]*)\|", $field_array[$field_to_check], $matches))) {
+				}elseif (isset($field_array[$field_to_check]) && (!is_array($field_array[$field_to_check])) && (preg_match("/\|(arg[123]):([a-zA-Z0-9_]*)\|/", $field_array[$field_to_check], $matches))) {
+					$string = $field_array[$field_to_check];
+					while ( 1 ) {
 				/* an empty field name in the variable means don't treat this as an array */
 				if ($matches[2] == "") {
 					if (is_array(${$matches[1]})) {
 						/* the existing value is already an array, leave it alone */
 						$form_array[$field_name][$field_to_check] = ${$matches[1]};
+								break;
 					}else{
 						/* the existing value is probably a single variable */
 						$form_array[$field_name][$field_to_check] = str_replace($matches[0], ${$matches[1]}, $field_array[$field_to_check]);
+								break;
 					}
 				}else{
 					/* copy the value down from the array/key specified in the variable */
-					$form_array[$field_name][$field_to_check] = str_replace($matches[0], ((isset(${$matches[1]}{$matches[2]})) ? ${$matches[1]}{$matches[2]} : ""), $field_array[$field_to_check]);
+							$string = str_replace($matches[0], ((isset(${$matches[1]}{$matches[2]})) ? ${$matches[1]}{$matches[2]} : ""), $string);
+
+							$matches = array();
+							preg_match("/\|(arg[123]):([a-zA-Z0-9_]*)\|/", $string, $matches);
+							if (!sizeof($matches)) {
+								$form_array[$field_name][$field_to_check] = $string;
+								break;
+							}
+						}
+					}
 				}
 			}
 		}
@@ -97,13 +111,13 @@
    @arg $width - the width of the table element
    @arg $style - the style to apply to the table element */
 function form_selectable_cell($contents, $id, $width="", $style="") {
-	print "\t<td" . (strlen($width) ? " width='$width'" : "") . (strlen($style) ? " style='$style;'" : "") . " onClick='select_line($id)'>" . $contents . "</td>\n";
+	print "\t<td" . (strlen($width) ? " width='$width'" : "") . (strlen($style) ? " style='$style;'" : "") . " onClick='select_line(\"$id\")'>" . $contents . "</td>\n";
 }
 
 /* form_checkbox_cell - format's a tables checkbox form element so that the cacti js actions work on it
    @arg $title - the text that will be displayed if your hover over the checkbox */
 function form_checkbox_cell($title, $id) {
-	print "\t<td onClick='select_line($id, true)' style='" . get_checkbox_style() . "' width='1%' align='right'>\n";
+	print "\t<td onClick='select_line(\"$id\", true)' style='" . get_checkbox_style() . "' width='1%' align='right'>\n";
 	print "\t\t<input type='checkbox' style='margin: 0px;' id='chk_" . $id . "' name='chk_" . $id . "'>\n";
 	print "\t</td>\n";
 }
